/**
 * 1. 2칸 위로, 1칸 오른쪽
 * 2. 1칸 위로, 2칸 오른쪽
 * 3. 1칸 아래로, 2칸 오른쪽
 * 4. 2칸 아래로, 1칸 오른쪽
 *
 * - 주어진 방향을 살펴보면 나이트는 항상 오른쪽으로 이동함
 * - 이동 횟수가 5 이하일 경우 1 ~ 4번 경로를 횟수 상관없이 사용 가능
 * - 이동 횟수가 5 이상일 경우 1 ~ 4번 경로를 한 번씩 모두 사용해야 함
 *    - 2, 3번은 나이트를 한 번 이동시키기 위해 오른쪽으로 2칸을 차지
 *    - 따라서 2, 3번은 한 번씩만 사용하고, 1, 4번을 최대한 사용해야 이동 횟수를 늘릴 수 있음
 *
 * 1) 세로가 1일 경우, 이동할 수 없으므로 시작 점 한 칸만 방문
 * 2) 세로가 2일 경우, 가로의 길이에 따라 다름
 *    -> 총 가로 길이 + 1 / 2
 *    -> 4와 비교하는 이유는 이동횟수가 5번을 넘게되면 결국 모든 경로를 한 번씩 사용해야 한다는 조건에 위배됨
 * 3) 세로가 3일 이상 & 가로가 6이하일 경우, 경로를 최소화하여 m의 길이만큼
 *    ->  Math.min(4, m);
 *    -> 4와 비교하는 이유는 이동횟수가 5번을 넘게되면 결국 모든 경로를 한 번씩 사용해야 한다는 조건에 위배됨
 * 4) 나머지의 경우, 4가지 경로 모두 가능 -> 2, 3번 한번씩 + 1, 4번 최대 횟수
 *    -> m - 2
 */
const input = require('fs').readFileSync('./input.txt').toString().trim().split(' ');
const [n, m] = input.map(Number); // m = 가로, n = 세로

const solution = () => {
  if (n === 1) return 1;
  if (n === 2) return Math.min(4, Math.floor((m + 1) / 2));
  if (m <= 6) return Math.min(4, m);
  return m - 2;
};

console.log(solution());
